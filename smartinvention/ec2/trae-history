#!/usr/bin/env python3
"""
Trae History Extractor (指令1)
從Trae提取對話歷史並保存到指定倉庫目錄

用法: trae-history <倉庫名稱> [選項]
"""

import os
import sys
import json
import sqlite3
import subprocess
import argparse
from datetime import datetime
from pathlib import Path

class TraeHistoryExtractor:
    def __init__(self):
        self.ssh_config = {
            "host": "serveo.net",
            "port": 41269,
            "user": "alexchuang",
            "password": "123456"
        }
        self.trae_db_path = "/Users/alexchuang/Library/Application Support/Trae/User/workspaceStorage/f002a9b85f221075092022809f5a075f/state.vscdb"
        self.base_dir = "/home/alexchuang/aiengine/trae/git"
    
    def ssh_execute(self, command):
        """通過SSH執行命令"""
        try:
            ssh_cmd = [
                "sshpass", "-p", self.ssh_config["password"],
                "ssh", "-o", "StrictHostKeyChecking=no",
                "-p", str(self.ssh_config["port"]),
                f"{self.ssh_config['user']}@{self.ssh_config['host']}",
                command
            ]
            
            result = subprocess.run(ssh_cmd, capture_output=True, text=True, timeout=30)
            return result.returncode == 0, result.stdout, result.stderr
            
        except Exception as e:
            return False, "", str(e)
    
    def extract_conversation_history(self, repo_name):
        """提取指定倉庫的對話歷史"""
        print(f"🔍 正在提取倉庫 '{repo_name}' 的對話歷史...")
        
        # SQL查詢命令
        sql_query = f"""
        sqlite3 "{self.trae_db_path}" "
        SELECT key, value FROM ItemTable 
        WHERE key LIKE '%input-history%' OR key LIKE '%memento%'
        ORDER BY key;
        "
        """
        
        success, output, error = self.ssh_execute(sql_query)
        
        if not success:
            print(f"❌ 無法連接到Trae數據庫: {error}")
            return None
        
        # 解析數據庫輸出
        conversations = []
        lines = output.strip().split('\n')
        
        for line in lines:
            if '|' in line:
                key, value = line.split('|', 1)
                try:
                    data = json.loads(value)
                    if isinstance(data, list):
                        for item in data:
                            if isinstance(item, dict) and 'inputText' in item:
                                # 檢查是否與倉庫相關
                                input_text = item.get('inputText', '').lower()
                                if repo_name.lower() in input_text or any(keyword in input_text for keyword in ['git', 'code', 'project']):
                                    conversations.append({
                                        'timestamp': item.get('timestamp', ''),
                                        'input': item.get('inputText', ''),
                                        'parsed_query': item.get('parsedQuery', []),
                                        'multimedia': item.get('multiMedia', []),
                                        'source': 'input_history'
                                    })
                    elif isinstance(data, dict) and 'content' in data:
                        # 完整對話記錄
                        content = data.get('content', '').lower()
                        if repo_name.lower() in content:
                            conversations.append({
                                'timestamp': data.get('timestamp', ''),
                                'role': data.get('role', ''),
                                'content': data.get('content', ''),
                                'model': data.get('display_model_name', ''),
                                'status': data.get('status', ''),
                                'source': 'conversation'
                            })
                except json.JSONDecodeError:
                    continue
        
        return conversations
    
    def save_history(self, repo_name, conversations):
        """保存對話歷史到指定目錄"""
        if not conversations:
            print(f"⚠️ 未找到倉庫 '{repo_name}' 的相關對話歷史")
            return False
        
        # 創建目標目錄
        history_dir = Path(self.base_dir) / repo_name / "history"
        history_dir.mkdir(parents=True, exist_ok=True)
        
        # 生成文件名
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        history_file = history_dir / f"conversation_history_{timestamp}.json"
        
        # 保存數據
        history_data = {
            "repository": repo_name,
            "extraction_time": datetime.now().isoformat(),
            "total_conversations": len(conversations),
            "conversations": conversations
        }
        
        try:
            with open(history_file, 'w', encoding='utf-8') as f:
                json.dump(history_data, f, indent=2, ensure_ascii=False)
            
            print(f"✅ 對話歷史已保存: {history_file}")
            print(f"📊 共提取 {len(conversations)} 條對話記錄")
            
            # 創建最新鏈接
            latest_link = history_dir / "latest.json"
            if latest_link.exists():
                latest_link.unlink()
            latest_link.symlink_to(history_file.name)
            
            return True
            
        except Exception as e:
            print(f"❌ 保存對話歷史失敗: {e}")
            return False
    
    def list_repositories(self):
        """列出可用的倉庫"""
        git_dir = Path(self.base_dir)
        if not git_dir.exists():
            print(f"❌ Git目錄不存在: {git_dir}")
            return []
        
        repos = [d.name for d in git_dir.iterdir() if d.is_dir() and (d / ".git").exists()]
        return repos
    
    def extract_history(self, repo_name):
        """執行對話歷史提取"""
        print(f"🚀 開始提取倉庫 '{repo_name}' 的對話歷史")
        print("=" * 50)
        
        # 檢查倉庫是否存在
        repo_path = Path(self.base_dir) / repo_name
        if not repo_path.exists():
            print(f"❌ 倉庫目錄不存在: {repo_path}")
            return False
        
        # 提取對話歷史
        conversations = self.extract_conversation_history(repo_name)
        if conversations is None:
            return False
        
        # 保存歷史記錄
        return self.save_history(repo_name, conversations)

def main():
    parser = argparse.ArgumentParser(description="Trae History Extractor")
    parser.add_argument("repo_name", nargs="?", help="倉庫名稱")
    parser.add_argument("--list", "-l", action="store_true", help="列出可用倉庫")
    parser.add_argument("--all", "-a", action="store_true", help="提取所有倉庫的歷史")
    
    args = parser.parse_args()
    
    extractor = TraeHistoryExtractor()
    
    if args.list:
        repos = extractor.list_repositories()
        print("📋 可用倉庫:")
        for repo in repos:
            print(f"   📁 {repo}")
        return
    
    if args.all:
        repos = extractor.list_repositories()
        success_count = 0
        for repo in repos:
            if extractor.extract_history(repo):
                success_count += 1
        print(f"\n🎉 完成! 成功提取 {success_count}/{len(repos)} 個倉庫的歷史")
        return
    
    if not args.repo_name:
        print("❌ 請指定倉庫名稱或使用 --list 查看可用倉庫")
        parser.print_help()
        return
    
    # 提取指定倉庫的歷史
    success = extractor.extract_history(args.repo_name)
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()

