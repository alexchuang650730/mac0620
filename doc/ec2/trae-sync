#!/usr/bin/env python3
"""
Trae Repository Sync (指令2)
找到倉庫名稱並同步源碼到指定目錄

用法: trae-sync <倉庫名稱> [選項]
"""

import os
import sys
import json
import subprocess
import argparse
from datetime import datetime
from pathlib import Path

class TraeRepositorySync:
    def __init__(self):
        self.ssh_config = {
            "host": "serveo.net", 
            "port": 41269,
            "user": "alexchuang",
            "password": "123456"
        }
        self.github_username = "alexchuang650730"
        self.base_dir = "/home/alexchuang/aiengine/trae/git"
        self.trae_app_support = "/Users/alexchuang/Library/Application Support/Trae"
    
    def ssh_execute(self, command):
        """通過SSH執行命令"""
        try:
            ssh_cmd = [
                "sshpass", "-p", self.ssh_config["password"],
                "ssh", "-o", "StrictHostKeyChecking=no",
                "-p", str(self.ssh_config["port"]),
                f"{self.ssh_config['user']}@{self.ssh_config['host']}",
                command
            ]
            
            result = subprocess.run(ssh_cmd, capture_output=True, text=True, timeout=60)
            return result.returncode == 0, result.stdout, result.stderr
            
        except Exception as e:
            return False, "", str(e)
    
    def discover_repositories(self):
        """從Trae中發現倉庫列表"""
        print("🔍 正在從Trae中發現倉庫...")
        
        # 搜索CodeKG數據庫
        ckg_command = f'find "{self.trae_app_support}/User/globalStorage/.ckg/storage" -name "*_codekg.db" 2>/dev/null | head -20'
        success, output, error = self.ssh_execute(ckg_command)
        
        repositories = set()
        
        if success and output:
            for line in output.strip().split('\n'):
                if line and '_codekg.db' in line:
                    repo_name = Path(line).stem.replace('_codekg', '')
                    if repo_name and repo_name not in ['Shared', 'temp']:
                        repositories.add(repo_name)
        
        # 添加已知倉庫
        known_repos = [
            "powerauto.ai_0.53",
            "communitypowerautomation",
            "powerauto_v0.3", 
            "powerautomation",
            "final_integration_fixed",
            "communitypowerauto"
        ]
        
        repositories.update(known_repos)
        
        print(f"📦 發現 {len(repositories)} 個倉庫")
        return list(repositories)
    
    def sync_repository_source(self, repo_name):
        """同步倉庫源碼"""
        print(f"🔄 正在同步倉庫 '{repo_name}' 的源碼...")
        
        # 創建源碼目錄
        source_dir = Path(self.base_dir) / repo_name / "source"
        source_dir.mkdir(parents=True, exist_ok=True)
        
        # Git倉庫URL
        repo_url = f"https://github.com/{self.github_username}/{repo_name}.git"
        
        # 檢查是否已存在Git倉庫
        git_dir = Path(self.base_dir) / repo_name
        
        try:
            if (git_dir / ".git").exists():
                # 更新現有倉庫
                print(f"📥 更新現有倉庫: {repo_name}")
                result = subprocess.run([
                    "git", "-C", str(git_dir), "pull", "origin", "main"
                ], capture_output=True, text=True, timeout=120)
                
                if result.returncode != 0:
                    # 嘗試master分支
                    result = subprocess.run([
                        "git", "-C", str(git_dir), "pull", "origin", "master"
                    ], capture_output=True, text=True, timeout=120)
                
                if result.returncode != 0:
                    print(f"⚠️ Git pull失敗，嘗試重新克隆...")
                    subprocess.run(["rm", "-rf", str(git_dir)], capture_output=True)
                    return self.clone_repository(repo_name, repo_url)
            else:
                # 克隆新倉庫
                return self.clone_repository(repo_name, repo_url)
            
            # 複製源碼到source目錄
            self.copy_source_files(git_dir, source_dir)
            
            print(f"✅ 倉庫 '{repo_name}' 源碼同步完成")
            return True
            
        except Exception as e:
            print(f"❌ 同步倉庫 '{repo_name}' 失敗: {e}")
            return False
    
    def clone_repository(self, repo_name, repo_url):
        """克隆倉庫"""
        print(f"📥 克隆倉庫: {repo_name}")
        
        git_dir = Path(self.base_dir) / repo_name
        
        result = subprocess.run([
            "git", "clone", repo_url, str(git_dir)
        ], capture_output=True, text=True, timeout=300)
        
        if result.returncode == 0:
            source_dir = git_dir / "source"
            self.copy_source_files(git_dir, source_dir)
            return True
        else:
            print(f"❌ 克隆失敗: {result.stderr}")
            return False
    
    def copy_source_files(self, git_dir, source_dir):
        """複製源碼文件到source目錄"""
        try:
            # 清空source目錄
            if source_dir.exists():
                subprocess.run(["rm", "-rf", str(source_dir)], capture_output=True)
            source_dir.mkdir(parents=True, exist_ok=True)
            
            # 複製所有文件，排除.git目錄
            for item in git_dir.iterdir():
                if item.name != ".git" and item.name != "source":
                    if item.is_dir():
                        subprocess.run([
                            "cp", "-r", str(item), str(source_dir / item.name)
                        ], capture_output=True)
                    else:
                        subprocess.run([
                            "cp", str(item), str(source_dir / item.name)
                        ], capture_output=True)
            
            # 創建同步信息文件
            sync_info = {
                "repository": git_dir.name,
                "sync_time": datetime.now().isoformat(),
                "source_directory": str(source_dir),
                "git_directory": str(git_dir)
            }
            
            with open(source_dir / "sync_info.json", 'w', encoding='utf-8') as f:
                json.dump(sync_info, f, indent=2, ensure_ascii=False)
            
            print(f"📁 源碼已複製到: {source_dir}")
            
        except Exception as e:
            print(f"⚠️ 複製源碼時出現警告: {e}")
    
    def list_repositories(self):
        """列出可用倉庫"""
        git_dir = Path(self.base_dir)
        if not git_dir.exists():
            return []
        
        repos = [d.name for d in git_dir.iterdir() if d.is_dir()]
        return repos
    
    def sync_repository(self, repo_name):
        """執行倉庫同步"""
        print(f"🚀 開始同步倉庫 '{repo_name}'")
        print("=" * 50)
        
        return self.sync_repository_source(repo_name)

def main():
    parser = argparse.ArgumentParser(description="Trae Repository Sync")
    parser.add_argument("repo_name", nargs="?", help="倉庫名稱")
    parser.add_argument("--list", "-l", action="store_true", help="列出可用倉庫")
    parser.add_argument("--discover", "-d", action="store_true", help="從Trae發現倉庫")
    parser.add_argument("--all", "-a", action="store_true", help="同步所有倉庫")
    
    args = parser.parse_args()
    
    syncer = TraeRepositorySync()
    
    if args.list:
        repos = syncer.list_repositories()
        print("📋 本地倉庫:")
        for repo in repos:
            print(f"   📁 {repo}")
        return
    
    if args.discover:
        repos = syncer.discover_repositories()
        print("📋 發現的倉庫:")
        for repo in repos:
            print(f"   📁 {repo}")
        return
    
    if args.all:
        repos = syncer.discover_repositories()
        success_count = 0
        for repo in repos:
            if syncer.sync_repository(repo):
                success_count += 1
        print(f"\n🎉 完成! 成功同步 {success_count}/{len(repos)} 個倉庫")
        return
    
    if not args.repo_name:
        print("❌ 請指定倉庫名稱或使用 --list 查看可用倉庫")
        parser.print_help()
        return
    
    # 同步指定倉庫
    success = syncer.sync_repository(args.repo_name)
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()

